// src/modules/vocabulary/adapters/openai-vocabulary-explanation.adapter.ts

import { Injectable, InternalServerErrorException, Logger } from '@nestjs/common'
import { OpenAI } from 'openai'
import { AppConfigService } from 'src/common/config/config.service'
import { VocabularyExplanationAdapter } from 'src/modules/vocabulary/learner-vocabulary/adapters/vocabulary-explanation-adapter.interface'
import { NATIVE_LANGUAGE } from '@prisma/client'

@Injectable()
export class OpenAIVocabularyExplanationAdapter implements VocabularyExplanationAdapter {
	private readonly client: OpenAI
	private readonly logger = new Logger(OpenAIVocabularyExplanationAdapter.name)

	constructor(private readonly config: AppConfigService) {
		this.client = new OpenAI({ apiKey: config.openai.apiKey })
	}

	async explain(word: string, language: NATIVE_LANGUAGE, description: string): Promise<string> {
		try {
			const res = await this.client.chat.completions.create({
				model: this.config.openai.model,
				messages: [
					{
						role: 'system',
						content: `Explain the word in ${language} based on the provided description.`,
					},
					{
						role: 'user',
						content: `Word: "${word}"\nDescription: "${description}"`,
					},
				],
			})
			if (!res.choices[0].message || !res.choices[0].message.content) {
				throw new InternalServerErrorException('No explanation generated by OpenAI')
			}
			return res.choices[0].message.content.trim()
		} catch (err) {
			this.logger.error('OpenAI explanation failed', err)
			throw new InternalServerErrorException('Failed to generate explanation')
		}
	}
}
