services:
  ########################################################################
  # 1) Traefik - Reverse Proxy for Automatic HTTPS via Let's Encrypt
  ########################################################################
  traefik:
    image: traefik:latest
    container_name: carscan-traefik
    command:
      - '--api.dashboard=true'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.websecure.address=:443'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      # Letâ€™s Encrypt ACME config
      - '--certificatesresolvers.myresolver.acme.httpchallenge=true'
      - '--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web'
      - '--certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_EMAIL}'
      - '--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json'
    ports:
      - '80:80' # HTTP
      - '443:443' # HTTPS
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/letsencrypt:/letsencrypt
    restart: always
    networks:
      - app_network

  ########################################################################
  # 2) Databases and Storage
  ########################################################################
  postgres:
    container_name: carscan-postgres
    image: postgres:latest
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER}']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - app_network

  minio:
    container_name: carscan-minio
    image: minio/minio:RELEASE.2025-02-18T16-25-55Z
    ports:
      - '9000:9000' # S3 API
      - '9001:9001' # Web UI
    env_file:
      - ./.env
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    volumes:
      - minio-data:/data
    command: server --console-address ":9001" /data
    restart: always
    networks:
      - app_network

  # 3) Database Management Tools (Optional for Development)
  pgadmin:
    container_name: carscan-pgadmin
    image: dpage/pgadmin4
    env_file:
      - ./.env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PG_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PG_PASSWORD}
    ports:
      - '8081:80'
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    networks:
      - app_network

  ########################################################################
  # 4) Backend (Golang Gin)
  ########################################################################
  backend:
    container_name: carscan-backend
    build:
      context: ./backend
      args:
        # Database
        DB_USER: ${DB_USER}
        DB_PASSWORD: ${DB_PASSWORD}
        DB_NAME: ${DB_NAME}
        DB_PORT: ${DB_PORT}
        DB_HOST: ${DB_HOST}

        # PGAdmin
        PGADMIN_DEFAULT_EMAIL: ${PG_EMAIL}
        PGADMIN_DEFAULT_PASSWORD: ${PG_PASSWORD}

        # Full connection URL
        DATABASE_URL: ${DATABASE_URL}
        # JWT Authentication
        ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
        ADMIN_JWT_EXPIRATION: ${ADMIN_JWT_EXPIRATION}
        LEARNER_JWT_SECRET: ${LEARNER_JWT_SECRET}
        LEARNER_JWT_EXPIRATION: ${LEARNER_JWT_EXPIRATION}

        # Server
        CLIENT_URL: ${CLIENT_URL}
        SERVER_PORT: ${SERVER_PORT}
        CLASSIFICATION_PIPELINE_URL: ${CLASSIFICATION_PIPELINE_URL}

        # WhatsApp
        WHATSAPP_ACCESS_TOKEN: ${WHATSAPP_ACCESS_TOKEN}
        WHATSAPP_PHONE_NUMBER_ID: ${WHATSAPP_PHONE_NUMBER_ID}
        WHATSAPP_API_VERSION: ${WHATSAPP_API_VERSION}

        # AI Modules
        OPENAI_API_KEY: ${OPENAI_API_KEY}
        OPENAI_MODEL: ${OPENAI_MODEL}
        OPENAI_MAX_TOKENS: ${OPENAI_MAX_TOKENS}

        S3_ACCESS_ENDPOINT: ${S3_ACCESS_ENDPOINT}
        S3_RESPONSE_ENDPOINT: ${S3_RESPONSE_ENDPOINT}
        S3_REGION: ${S3_REGION}
        S3_ACCESS_KEY: ${S3_ACCESS_KEY}
        S3_SECRET_KEY: ${S3_SECRET_KEY}
        S3_BUCKET: ${S3_BUCKET}
        S3_IMAGE_PREFIX: ${S3_IMAGE_PREFIX}
        S3_AUDIO_PREFIX: ${S3_AUDIO_PREFIX}
        S3_PATH_STYLE: ${S3_PATH_STYLE}

        SECURITY_BACKEND_CORS_ORIGINS: ${SECURITY_BACKEND_CORS_ORIGINS}
        SECURITY_ALLOWED_HOSTS: ${SECURITY_ALLOWED_HOSTS}
    env_file:
      - ./.env
    ports:
      - '8080:8080'
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/logs:/app/logs
    restart: always
    networks:
      - app_network

  ########################################################################
  # 5) Frontend (Vite Vue 3) w/ Nginx
  ########################################################################
  frontend:
    container_name: carscan-frontend
    build:
      context: ./frontend
      args:
        VITE_API_URL: ${VITE_API_URL}
        NGINX_SERVER_NAME: ${NGINX_SERVER_NAME}
    env_file:
      - ./.env
    restart: always
    networks:
      - app_network
    depends_on:
      backend:
        condition: service_started
    labels:
      # Enable Traefik for this service
      - 'traefik.enable=true'

      # HTTPS router
      - 'traefik.http.routers.frontend-https.rule=Host(`${NGINX_SERVER_NAME}`)'
      - 'traefik.http.routers.frontend-https.entrypoints=websecure'
      - 'traefik.http.routers.frontend-https.tls=true'
      - 'traefik.http.routers.frontend-https.tls.certresolver=myresolver'

      # HTTP router for redirect -> HTTPS
      - 'traefik.http.routers.frontend-http.rule=Host(`${NGINX_SERVER_NAME}`)'
      - 'traefik.http.routers.frontend-http.entrypoints=web'
      - 'traefik.http.middlewares.default-redirect.redirectscheme.scheme=https'
      - 'traefik.http.routers.frontend-http.middlewares=default-redirect'

      # Internal port that Nginx listens on
      - 'traefik.http.services.frontend.loadbalancer.server.port=80'

######################################################################
# Named Volumes
######################################################################
volumes:
  db_data:

######################################################################
# Docker Network
######################################################################
networks:
  app_network:
    driver: bridge
